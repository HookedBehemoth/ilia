// -*- C++ -*-
//===------------------------------- array -------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===---------------------------------------------------------------------===//

#ifndef _LIBCPP_EXPERIMENTAL_ARRAY
#define _LIBCPP_EXPERIMENTAL_ARRAY

/*
  experimental/array synopsis

#include <array>

namespace std {
namespace experimental {
inline namespace fundamentals_v2 {

  // [container.array.creation], Array creation functions
  template <class D = void, class... Types>
    constexpr array<VT, sizeof...(Types)> make_array(Types&&... t);
  template <class T, size_t N>
    constexpr array<remove_cv_t<T>, N> to_array(T (&a)[N]);

} // namespace fundamentals_v2
} // namespace experimental
} // namespace std

*/

#include <experimental/__config>

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

#if _LIBCPP_STD_VER > 11

#include <array>
#include <cstddef>
#include <experimental/type_traits>
#include <functional>
#include <utility>

_LIBCPP_BEGIN_NAMESPACE_LFTS_V2

template <class _D_Ty, class...>
struct __make_array_value_type {
  using type = _D_Ty;
};

template <class... _Types>
struct __make_array_value_type<void, _Types...> : common_type<_Types...> {
  static_assert(sizeof...(_Types) > 0,
                "An element type must be specified if there are no given values.");

  template <class>
    struct __is_ref_wrapper : false_type { };
  template <class _Tp>
    struct __is_ref_wrapper<reference_wrapper<_Tp>> : true_type { };
  static_assert(!disjunction_v<__is_ref_wrapper<decay_t<_Types>>...>,
                "An element type must be specified if any of the given values "
                "are reference_wrappers.");
};

template <class _D_Ty = void, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
_LIBCPP_CONSTEXPR
array<typename __make_array_value_type<_D_Ty, _Types...>::type, sizeof...(_Types)>
make_array(_Types &&... __ts) {
  return {{forward<_Types>(__ts)...}};
}

template <class _Tp, size_t _Num, size_t... _Is>
inline _LIBCPP_INLINE_VISIBILITY
_LIBCPP_CONSTEXPR
array<remove_cv_t<_Tp>, _Num>
__to_array_impl(_Tp (&__a)[_Num], index_sequence<_Is...>) {
  return {{__a[_Is]...}};
}

template <class _Tp, size_t _Num>
inline _LIBCPP_INLINE_VISIBILITY
_LIBCPP_CONSTEXPR
auto to_array(_Tp (&__a)[_Num]) -> decltype(__to_array_impl(__a, {})) {
  return __to_array_impl(__a, make_index_sequence<_Num>{});;
}

_LIBCPP_END_NAMESPACE_LFTS_V2

#endif // _LIBCPP_STD_VER > 11

#endif // _LIBCPP_EXPERIMENTAL_ARRAY
